// <auto-generated />
using System;
using MP2021_LKLB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MP2021_LKLB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("SumHour")
                        .HasColumnType("time");

                    b.Property<float?>("SumKilometers")
                        .HasColumnType("real");

                    b.Property<float?>("TopScore")
                        .HasColumnType("real");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "TOMAS123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8cbce41-1f10-466e-b5b1-73f77233d3d9",
                            Email = "tomas.kulhavy@pslib.cz",
                            EmailConfirmed = true,
                            FirstName = "Tomáš",
                            Gender = 0,
                            LastName = "Kulhavý",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMAS.KULHAVY@PSLIB.CZ",
                            NormalizedUserName = "TOMASLKLB",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtnm8zKk6j5WYctyYnqAOhCHBwcP61qorRLOSrqA20dwuHWL04du+gXV6tgbpr9OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "TomasLKLB"
                        },
                        new
                        {
                            Id = "WOLF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90a12438-52a2-459c-ae69-6ede4d86634e",
                            Email = "w.sluka@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Wolfgang",
                            Gender = 0,
                            LastName = "Sluka",
                            LockoutEnabled = false,
                            NormalizedEmail = "W.SLUKA@SEZNAM.CZ",
                            NormalizedUserName = "WOLF",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQ8u9VtdT9QRi9SMsiBIV4CkyCTjhRIQt7gPUbK8dtkHJ7ot8aoqxsme3BrYRYRNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Wolf"
                        },
                        new
                        {
                            Id = "CICA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7957423d-7a01-411f-8ffa-50cb819c8a41",
                            Email = "meta5@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Martin",
                            Gender = 0,
                            LastName = "Cicvárek",
                            LockoutEnabled = false,
                            NormalizedEmail = "META5@SEZNAM.CZ",
                            NormalizedUserName = "CÍCA",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+07k3WCk1Eu6pyBzrZyh9yOFcQzzd1nfC+NN76Xsttewo9IquGq5lR+8ZmtaqXHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Cíca"
                        },
                        new
                        {
                            Id = "LUKASZ",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ea3c75d-47d2-4d36-9ea6-3e205917f447",
                            Email = "czajkolu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lukasz",
                            Gender = 0,
                            LastName = "Czaikowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "CZAJKOLU@GMAIL.COM",
                            NormalizedUserName = "LUKASZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwz7ezQA3NI6CE3vaPSdyjzX6mOB/74Rfu+RnRaL9dXJTW3c1GBBId6myStTsiRkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Lukasz"
                        },
                        new
                        {
                            Id = "JANHYB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4436b97b-eb63-4b42-9d78-ce784f019edf",
                            Email = "jan.hyb@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            Gender = 0,
                            LastName = "Hybner",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAN.HYB@SEZNAM.CZ",
                            NormalizedUserName = "HONZAHYB",
                            PasswordHash = "AQAAAAEAACcQAAAAEAr/vgOIMhiIxiW4c/2MeDQcenbkcRos+sy2ynHmbO2+w2dL+cHpR+IfWfMNHIsR9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "HonzaHyb"
                        },
                        new
                        {
                            Id = "ZDENEK",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c48ca80-6607-4dae-9fb2-dbb501f5844e",
                            Email = "Zdenek.Ulrych@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Zdeněk",
                            Gender = 0,
                            LastName = "Ulrych",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZDENEK.ULRYCH@SEZNAM.CZ",
                            NormalizedUserName = "ZDENEK",
                            PasswordHash = "AQAAAAEAACcQAAAAEHo+HVe4IUEvl7MwkNRcE8DKw11az+2jYZv/aJthb8WxAG4dCDwpfr4Hgifk+adIEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Zdenek"
                        },
                        new
                        {
                            Id = "PETRZA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcbe78b0-1f90-4614-83a3-e1d35965a0b2",
                            Email = "petr-zajic@volny.cz",
                            EmailConfirmed = true,
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Zajíc",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETR-ZAJIC@VOLNY.CZ",
                            NormalizedUserName = "ZAJDA",
                            PasswordHash = "AQAAAAEAACcQAAAAEC48NzR28QB3VKBezmlEGMccsAA1+cOS7bHel3kn14ME1Nx0Et3Zw+PpHdEyo4llzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Zajda"
                        },
                        new
                        {
                            Id = "PETRHYB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f70be20e-ab4d-4bbf-9ef7-aa5645223964",
                            Email = "petr-hybner@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Petr",
                            Gender = 0,
                            LastName = "Hybner",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETR-HYBNER@SEZNAM.CZ",
                            NormalizedUserName = "PETRHYB",
                            PasswordHash = "AQAAAAEAACcQAAAAELZavNvT+aJXghhvTvlu3H2UhWBXvPEO6Prf7zsYUeSCt+h4AdNI1HSX+6HdKrHgAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "PetrHyb"
                        },
                        new
                        {
                            Id = "RUDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cadbcbcf-09e0-4a96-a3e0-bdb59f8350f5",
                            Email = "patrman.rudolf@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Rudolf",
                            Gender = 0,
                            LastName = "Patrman",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRMAN.RUDOLF@SEZNAM.CZ",
                            NormalizedUserName = "RUDA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFrPCXznpiTCxKNJy2AfCZqKrrLQONXvLnwUNx2Ou2JRE1VWTohFTo65uScV+hyLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Ruda"
                        },
                        new
                        {
                            Id = "MILAN",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2bb043b-04bc-4578-adf7-26fc00c0f5a0",
                            Email = "milandvorak.gld@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Milan",
                            Gender = 0,
                            LastName = "Dvořák",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANDVORAK.GLD@SEZNAM.CZ",
                            NormalizedUserName = "MILAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL1j0z0//qGVZrQscqxnDpy0YR4OoKGyNRKjsyT3+LuCzyxi4ldFjKKGXVHlHOR45A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Milan"
                        });
                });

            modelBuilder.Entity("MP2021_LKLB.Models.DataRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FlightLogId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FlightLogId");

                    b.ToTable("DataRecords");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Extensions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DataRecordsId")
                        .HasColumnType("int");

                    b.Property<string>("ENL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FXA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FixesId")
                        .HasColumnType("int");

                    b.Property<string>("GSP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TRT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WDI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WVE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataRecordsId")
                        .IsUnique();

                    b.HasIndex("FixesId")
                        .IsUnique();

                    b.ToTable("Extensions");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Fixes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("Enl")
                        .HasColumnType("float");

                    b.Property<int?>("FixAccuracy")
                        .HasColumnType("int");

                    b.Property<int>("FlightLogId")
                        .HasColumnType("int");

                    b.Property<int?>("GpsAltitude")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("PressureAltitude")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FlightLogId");

                    b.ToTable("Fixes");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Callsign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Copilot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Errors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GliderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardwareVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoggerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoggerManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoggerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumFlight")
                        .HasColumnType("int");

                    b.Property<string>("Pilot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Security")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FlightLogs");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightLogAnalyse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float?>("AvgSpeed")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("FlightTime")
                        .HasColumnType("time");

                    b.Property<float?>("Kilometers")
                        .HasColumnType("real");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<bool>("Topflight")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FlightLogAnalyses");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightTask", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeclarationDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("DeclarationTime")
                        .HasColumnType("time");

                    b.Property<long?>("DeclarationTimestamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FlightDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumTurnpoints")
                        .HasColumnType("int");

                    b.Property<string>("TaskNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FlightTasks");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Points", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FlightTaskId")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlightTaskId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "TOMAS123",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "TOMAS123",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "MILAN",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "RUDA",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "LUKASZ",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "CICA",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "WOLF",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "PETRZA",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "PETRHYB",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "ZDENEK",
                            RoleId = "PILOT"
                        },
                        new
                        {
                            UserId = "JANHYB",
                            RoleId = "PILOT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.PilotRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("PilotRole");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "967cbc0e-594e-474a-ba60-70c62e259f5c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "PILOT",
                            ConcurrencyStamp = "9c622fff-0b9c-451d-ab15-46fd5d14a067",
                            Name = "Pilot",
                            NormalizedName = "PILOT"
                        });
                });

            modelBuilder.Entity("MP2021_LKLB.Models.DataRecords", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.FlightLog", "FlightLog")
                        .WithMany("DataRecords")
                        .HasForeignKey("FlightLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightLog");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Extensions", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.DataRecords", "DataRecord")
                        .WithOne("Extension")
                        .HasForeignKey("MP2021_LKLB.Models.Extensions", "DataRecordsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MP2021_LKLB.Models.Fixes", "Fix")
                        .WithOne("Extension")
                        .HasForeignKey("MP2021_LKLB.Models.Extensions", "FixesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataRecord");

                    b.Navigation("Fix");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Fixes", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.FlightLog", "FlightLog")
                        .WithMany("Fixes")
                        .HasForeignKey("FlightLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightLog");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightLog", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.ApplicationUser", "User")
                        .WithMany("Flights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightLogAnalyse", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.FlightLog", "FlightLog")
                        .WithOne("FlightLogAnalyse")
                        .HasForeignKey("MP2021_LKLB.Models.FlightLogAnalyse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightLog");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightTask", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.FlightLog", "FlightLog")
                        .WithOne("Task")
                        .HasForeignKey("MP2021_LKLB.Models.FlightTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightLog");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Points", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.FlightTask", "FlightTask")
                        .WithMany("Points")
                        .HasForeignKey("FlightTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MP2021_LKLB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MP2021_LKLB.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MP2021_LKLB.Models.ApplicationUser", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.DataRecords", b =>
                {
                    b.Navigation("Extension");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.Fixes", b =>
                {
                    b.Navigation("Extension");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightLog", b =>
                {
                    b.Navigation("DataRecords");

                    b.Navigation("Fixes");

                    b.Navigation("FlightLogAnalyse");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MP2021_LKLB.Models.FlightTask", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
